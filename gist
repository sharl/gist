#!/usr/bin/env perl

use strict;
use warnings;
use utf8;

use File::Basename;
use Config::Tiny;
use Getopt::Long;
use JSON::XS;
use LWP::UserAgent;
use HTTP::Request::Common qw(POST);
use Data::Dumper;

my ($content, $description, $filename, $private);
my $prog = basename($0);

usage() unless GetOptions('description=s', \$description,
			  'filename=s',    \$filename,		# from STDIN
			  'private',       \$private,    );

my $file = $ARGV[0];
$filename ||= $file ? basename($file) : ($filename ? $filename : '_');
if ($file) {
    open(my $fd, $file) or die $!;
    $content = join('', <$fd>);
    close($fd);
} else {
    $content = join('', <STDIN>);
}
post();

sub usage {
    print STDERR <<EOF;
usage: $prog [-d description] [-f filename] [-p] [file]
	-d/--description	file description
	-f/--filename		specify filename
	-p/--private		put file into private repository
EOF
;
    exit 1;
}

sub post {
    my $data = {
	description => $description,
	public => $private ? JSON::XS::false : JSON::XS::true,
	files => {
	    $filename => {
		content => $content
	    }
	},
    };
    my $json = encode_json($data);
    utf8::decode($json);

    my $cfg = Config::Tiny->read($ENV{HOME} . '/.gitconfig');
    my $ua  = LWP::UserAgent->new;
    my $req = POST('https://api.github.com/gists', Content => $json);
    $req->authorization_basic($cfg->{github}{user}, $cfg->{github}{password});
    my $res = $ua->request($req);
    if ($res->is_success) {
	my $data = decode_json($res->content);
	print $data->{html_url} . "\n";
    } else {
	print Dumper $res;
    }
}
